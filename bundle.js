(()=>{var B=class{constructor(){this.board=Array(9).fill(null).map(()=>Array(9).fill(0)),this.initialBoard=Array(9).fill(null).map(()=>Array(9).fill(0)),this.candidates=Array(9).fill(null).map(()=>Array(9).fill(null).map(()=>new Set([1,2,3,4,5,6,7,8,9]))),this.bannedCandidates=Array(9).fill(null).map(()=>Array(9).fill(null).map(()=>new Set)),this.solvingHistory=[],this.currentStep=0}loadPuzzle(t){this.board=t.map(e=>[...e]),this.initialBoard=t.map(e=>[...e]),this.resetCandidates(),this.clearAllBans(),this.solvingHistory=[],this.currentStep=0,this.updateCandidates()}resetCandidates(){this.candidates=Array(9).fill(null).map(()=>Array(9).fill(null).map(()=>new Set([1,2,3,4,5,6,7,8,9])))}clearAllBans(){this.bannedCandidates=Array(9).fill(null).map(()=>Array(9).fill(null).map(()=>new Set))}enforceBans(){for(let t=0;t<9;t++)for(let e=0;e<9;e++)if(this.board[t][e]===0)for(let s of this.bannedCandidates[t][e])this.candidates[t][e].delete(s)}updateCandidates(){this.resetCandidates();for(let t=0;t<9;t++)for(let e=0;e<9;e++)this.board[t][e]!==0&&(this.candidates[t][e].clear(),this.removeCandidateFromPeers(t,e,this.board[t][e]));this.enforceBans()}removeCandidateFromPeers(t,e,s){for(let o=0;o<9;o++)o!==e&&this.candidates[t][o].delete(s);for(let o=0;o<9;o++)o!==t&&this.candidates[o][e].delete(s);let i=Math.floor(t/3)*3,l=Math.floor(e/3)*3;for(let o=i;o<i+3;o++)for(let n=l;n<l+3;n++)(o!==t||n!==e)&&this.candidates[o][n].delete(s)}banCandidate(t,e,s){s<1||s>9||(this.bannedCandidates[t][e].add(s),this.candidates[t][e].delete(s))}setValue(t,e,s){return this.initialBoard[t][e]!==0?!1:(this.board[t][e]=s,this.candidates[t][e].clear(),this.bannedCandidates[t][e].clear(),s!==0?this.removeCandidateFromPeers(t,e,s):this.updateCandidates(),!0)}getValue(t,e){return this.board[t][e]}getCandidates(t,e){return Array.from(this.candidates[t][e])}isValid(t,e,s){if(s===0)return!0;for(let o=0;o<9;o++)if(o!==e&&this.board[t][o]===s)return!1;for(let o=0;o<9;o++)if(o!==t&&this.board[o][e]===s)return!1;let i=Math.floor(t/3)*3,l=Math.floor(e/3)*3;for(let o=i;o<i+3;o++)for(let n=l;n<l+3;n++)if((o!==t||n!==e)&&this.board[o][n]===s)return!1;return!0}isBoardValid(){for(let t=0;t<9;t++)for(let e=0;e<9;e++)if(this.board[t][e]!==0&&!this.isValid(t,e,this.board[t][e]))return!1;return!0}isComplete(){for(let t=0;t<9;t++)for(let e=0;e<9;e++)if(this.board[t][e]===0)return!1;return this.isBoardValid()}getRow(t){return this.board[t]}getColumn(t){return this.board.map(e=>e[t])}getBox(t,e){let s=[],i=t*3,l=e*3;for(let o=i;o<i+3;o++)for(let n=l;n<l+3;n++)s.push({row:o,col:n,value:this.board[o][n]});return s}getEmptyCells(){let t=[];for(let e=0;e<9;e++)for(let s=0;s<9;s++)this.board[e][s]===0&&t.push({row:e,col:s});return t}reset(){this.board=this.initialBoard.map(t=>[...t]),this.clearAllBans(),this.updateCandidates(),this.solvingHistory=[],this.currentStep=0}toString(){return this.board.map(t=>t.join(" ")).join(`
`)}loadFromString(t){let e=t.trim().split(`
`),s=[];for(let i of e){let l=i.split(/\s+/).map(o=>{let n=parseInt(o);return isNaN(n)?0:n});s.push(l)}this.loadPuzzle(s)}loadFromCode(t){if(typeof t!="string")throw new Error("Code must be a string");let e=t.replace(/\s+/g,"");if(!/^\d{81}$/.test(e))throw new Error("Code must be exactly 81 digits (0-9)");let s=[];for(let i=0;i<9;i++){let l=[];for(let o=0;o<9;o++){let n=e[i*9+o];l.push(parseInt(n,10))}s.push(l)}this.loadPuzzle(s)}},E=B;var A=class{constructor(t,e=null){this.board=t,this.extensions=e}setExtensions(t){this.extensions=t}find(){return{found:!1,message:"Not implemented"}}},m=A;var x=class extends m{constructor(t,e=null){super(t,e),this.board=t,this.extensions=e}find(){let t=$(this.board);if(!t||t.length===0)return{found:!1,message:"No naked singles"};let e=t[0];return this.board.setValue(e.row,e.col,e.value),{found:!0,message:`Found naked single: ${e.value} at (${e.row+1}, ${e.col+1})`,changes:[{row:e.row,col:e.col,value:e.value,type:"naked-single"}]}}};function $(c){let t=[];for(let e=0;e<9;e++)for(let s=0;s<9;s++)c.board[e][s]===0&&c.candidates[e][s].size===1&&t.push({row:e,col:s,value:Number(Array.from(c.candidates[e][s])[0])});return t}var C=class extends m{constructor(t,e=null){super(t,e),this.board=t,this.extensions=e}find(){let t=N(this.board);if(!t||t.length===0)return{found:!1,message:"No hidden singles"};let e=t[0];return this.board.setValue(e.row,e.col,e.value),{found:!0,message:`Found hidden single: ${e.value} at (${e.row+1}, ${e.col+1}) in ${e.type}`,changes:[{row:e.row,col:e.col,value:e.value,type:"hidden-single",context:e.type}]}}};function N(c){let t=[];for(let e=0;e<9;e++){let s=T(c,e);for(let i=1;i<=9;i++)(s[i]||[]).length===1&&t.push({row:e,col:(s[i]||[0])[0],value:i,type:"row"})}for(let e=0;e<9;e++){let s=D(c,e);for(let i=1;i<=9;i++)(s[i]||[]).length===1&&t.push({row:(s[i]||[0])[0],col:e,value:i,type:"column"})}for(let e=0;e<3;e++)for(let s=0;s<3;s++){let i=H(c,e,s);for(let l=1;l<=9;l++)if((i[l]||[]).length===1){let o=(i[l]||[{row:0,col:0}])[0];t.push({row:o.row,col:o.col,value:l,type:"box"})}}return t}function T(c,t){let e={};for(let s=1;s<=9;s++)e[s]=[];for(let s=0;s<9;s++)if(c.board[t][s]===0)for(let i of c.getCandidates?c.getCandidates(t,s):c.candidates[t][s])e[i].push(s);return e}function D(c,t){let e={};for(let s=1;s<=9;s++)e[s]=[];for(let s=0;s<9;s++)if(c.board[s][t]===0)for(let i of c.getCandidates?c.getCandidates(s,t):c.candidates[s][t])e[i].push(s);return e}function H(c,t,e){let s={};for(let o=1;o<=9;o++)s[o]=[];let i=t*3,l=e*3;for(let o=i;o<i+3;o++)for(let n=l;n<l+3;n++)if(c.board[o][n]===0)for(let a of c.getCandidates?c.getCandidates(o,n):c.candidates[o][n])s[a].push({row:o,col:n});return s}var b=class extends m{constructor(t,e=null){super(t,e),this.board=t,this.extensions=e}find(){let t=!!this.extensions,e=t&&this.extensions.exportState?this.extensions.exportState():null,s=this.board.getEmptyCells();for(let{row:i,col:l}of s){let o=this.board.getCandidates(i,l);for(let n of o){let a=this.cloneBoard(this.board);if(a.setValue(i,l,n),t&&this.extensions&&this.extensions.importState)try{this.extensions.importState(e)}catch{}if(a.updateCandidates&&a.updateCandidates(),this.detectImmediateContradiction(a))return this.board.removeCandidate&&this.board.removeCandidate(i,l,n),{found:!0,message:`Eliminated candidate ${n} at (${i+1}, ${l+1}) by contradiction`,changes:[{row:i,col:l,removed:[n],type:"single-step-guess"}]}}}return{found:!1,message:"No contradiction-based eliminations found"}}cloneBoard(t){try{let e=new t.constructor;return e.board=t.board.map(s=>Array.isArray(s)?[...s]:s),e.initialBoard=(t.initialBoard||[]).map(s=>Array.isArray(s)?[...s]:s),e.updateCandidates&&e.updateCandidates(),e}catch{return JSON.parse(JSON.stringify(t))}}detectImmediateContradiction(t){for(let e=0;e<9;e++)for(let s=0;s<9;s++)if(!t.getValue(e,s)&&t.getCandidates(e,s).length===0)return{type:"empty-cell",row:e,col:s};for(let e=0;e<9;e++)for(let s=1;s<=9;s++)if(!t.rowHasValue(e,s)&&t.countCandidatePlacesInRow(e,s)===0)return{type:"row-no-place",row:e,digit:s};for(let e=0;e<9;e++)for(let s=1;s<=9;s++)if(!t.colHasValue(e,s)&&t.countCandidatePlacesInCol(e,s)===0)return{type:"col-no-place",col:e,digit:s};for(let e=0;e<3;e++)for(let s=0;s<3;s++)for(let i=1;i<=9;i++)if(!t.boxHasValue(e,s,i)&&t.countCandidatePlacesInBox(e,s,i)===0)return{type:"box-no-place",boxRow:e,boxCol:s,digit:i};return null}};var v=class{find(){return{found:!1,message:"Not implemented"}}},K={"naked-single":x,"hidden-single":C,"single-step-guess":b,"x-wing":v,swordfish:v,"xy-wing":v,"xyz-wing":v},S=K;var M=class{constructor(t){this.board=t,this.extensions=null,this.tacticDescriptions={"naked-single":{name:"Naked Single",description:"A cell that has only one possible candidate remaining. This is the most basic solving technique.",difficulty:"Easy",explanation:"When a cell has only one possible number that can be placed there, that number must be the solution for that cell."},"hidden-single":{name:"Hidden Single",description:"A number that can only be placed in one cell within a row, column, or box.",difficulty:"Easy",explanation:"When a number appears as a candidate in only one cell within a row, column, or 3x3 box, that number must be placed in that cell."},"single-step-guess":{name:"Single-Step Guess (Contradiction)",description:"Temporarily assume a candidate in a cell. If this immediately causes a contradiction (no candidates in a cell or a digit has no place in a unit), eliminate that candidate.",difficulty:"Medium",explanation:"Try a candidate and propagate constraints once. If the assumption leaves a unit without a place for some digit, that candidate is impossible."}}}setExtensions(t){this.extensions=t}executeTactic(t){let s=(S||{})[t];if(!s)return{found:!1,message:`Unknown tactic: ${t}`};let i=new s(this.board,this.extensions);return typeof i.setExtensions=="function"&&i.setExtensions(this.extensions),typeof i.find=="function"?i.find():{found:!1,message:`Tactic ${t} not implemented`}}getTacticDescription(t){return this.tacticDescriptions[t]||{name:"Unknown",description:"Unknown",difficulty:"Unknown",explanation:""}}},w=M;var k=class{constructor(t){this.board=t,this.extensions=new Map,this.thermoConstraints=[],this.knightConstraints=[],this.kingConstraints=[],this.extensionDescriptions={thermo:{name:"Thermo Sudoku",description:"Numbers along a thermometer must increase from the bulb to the tip.",rules:[],difficulty:"Medium"},knight:{name:"Knight's Move Sudoku",description:"Numbers cannot repeat in cells that are a knight's move away (L-shaped).",rules:[],difficulty:"Hard"},king:{name:"King's Move Sudoku",description:"Numbers cannot repeat in cells that are adjacent (including diagonally).",rules:[],difficulty:"Medium"},"box-sum-neighbor":{name:"Box-Sum Neighbor",description:"A cell value v cannot be next to any neighbor with value (boxNumber - v).",rules:[],difficulty:"Medium"}}}},z=k;var I=class{constructor(){this.lastUnitIssueKeys=null,this.puzzleGrid=null,this.tacticSelect=null,this.tacticDescription=null,this.solvingLog=null,this.extensionInfo=null,this.cells=[],this.board=new E,this.tactics=new w(this.board),this.extensions=new z(this.board),this.tactics.setExtensions(this.extensions),this.solvingHistory=[],this.currentStep=0,this.autoSolving=!1,this.autoSolveInterval=null,this.lastConflictKeys=new Set,this.lastNoCandKeys=new Set,this.autoTacticOrder=["naked-single","hidden-single","pointing-pair","box-line-reduction","naked-pair","hidden-pair","x-wing","swordfish","xy-wing","xyz-wing","single-step-guess"],this.initializeUI(),this.bindEvents(),this.loadExamplePuzzle()}initializeUI(){this.puzzleGrid=document.getElementById("puzzleGrid"),this.tacticSelect=document.getElementById("tacticSelect"),this.tacticDescription=document.getElementById("tacticDescription"),this.solvingLog=document.getElementById("solvingLog"),this.extensionInfo=document.getElementById("extensionInfo"),this.createSudokuGrid(),this.updateTacticDescription(),this.updateExtensionInfo()}createSudokuGrid(){if(this.puzzleGrid){this.puzzleGrid.innerHTML="",this.cells=[];for(let t=0;t<9;t++)for(let e=0;e<9;e++){let s=document.createElement("div");s.className="cell",s.dataset.row=String(t),s.dataset.col=String(e);let i=document.createElement("input");i.type="text",i.className="cell-input",i.maxLength=1,i.inputMode="numeric";let l=document.createElement("div");l.className="candidates";for(let o=1;o<=9;o++){let n=document.createElement("div");n.className="candidate",l.appendChild(n)}(e===2||e===5)&&(s.style.borderRight="2px solid #333"),(t===2||t===5)&&(s.style.borderBottom="2px solid #333"),s.appendChild(i),s.appendChild(l),this.puzzleGrid.appendChild(s),this.cells.push(s),i.addEventListener("input",o=>this.handleCellInput(o,t,e)),i.addEventListener("keydown",o=>this.handleCellKeydown(o,t,e)),i.addEventListener("focus",()=>this.handleCellFocus(t,e)),i.addEventListener("blur",()=>this.handleCellBlur(t,e))}}}bindEvents(){var t,e,s,i,l,o,n,a,d,h,r,p,f;let u=y=>document.getElementById(y);(t=u("clearBtn"))===null||t===void 0||t.addEventListener("click",()=>this.clearBoard()),(e=u("loadExampleBtn"))===null||e===void 0||e.addEventListener("click",()=>this.loadExamplePuzzle()),(s=u("validateBtn"))===null||s===void 0||s.addEventListener("click",()=>this.validateBoard()),(i=u("stepBtn"))===null||i===void 0||i.addEventListener("click",()=>this.executeStep()),(l=u("autoSolveBtn"))===null||l===void 0||l.addEventListener("click",()=>this.toggleAutoSolve()),(o=u("resetBtn"))===null||o===void 0||o.addEventListener("click",()=>this.resetBoard()),(n=this.tacticSelect)===null||n===void 0||n.addEventListener("change",()=>this.updateTacticDescription()),(a=u("addThermoBtn"))===null||a===void 0||a.addEventListener("click",()=>this.addThermoSudoku()),(d=u("addKnightBtn"))===null||d===void 0||d.addEventListener("click",()=>this.addKnightsMove()),(h=u("addKingBtn"))===null||h===void 0||h.addEventListener("click",()=>this.addKingsMove()),(r=u("addBoxSumNeighborBtn"))===null||r===void 0||r.addEventListener("click",()=>this.addBoxSumNeighbor()),(p=u("clearExtensionsBtn"))===null||p===void 0||p.addEventListener("click",()=>this.clearExtensions()),(f=u("loadCodeBtn"))===null||f===void 0||f.addEventListener("click",()=>this.loadFromCodeInput())}handleCellInput(t,e,s){let i=t.target,l=(i.value||"").replace(/[^1-9]/g,"");i.value=l;let o=l===""?0:parseInt(l,10);if(o!==0&&this.extensions.getActiveExtensions&&this.extensions.getActiveExtensions().length>0&&this.extensions.validateMove&&!this.extensions.validateMove(e,s,o)){i.value="",this.logMessage("Move violates constraints","error");return}this.board.setValue(e,s,o),this.updateCellDisplay(e,s),this.updateCandidates()}handleCellKeydown(t,e,s){(t.key==="Backspace"||t.key==="Delete")&&(this.board.setValue(e,s,0),this.updateCellDisplay(e,s),this.updateCandidates())}handleCellFocus(t,e){this.highlightRelatedCells(t,e)}handleCellBlur(t,e){this.clearHighlights()}highlightRelatedCells(t,e){for(let s=0;s<9;s++)for(let i=0;i<9;i++){let l=this.getCellElement(s,i);(s===t||i===e||Math.floor(s/3)===Math.floor(t/3)&&Math.floor(i/3)===Math.floor(e/3))&&l.classList.add("highlighted")}}clearHighlights(){this.cells.forEach(t=>t.classList.remove("highlighted"))}getCellElement(t,e){return this.cells[t*9+e]}updateCellDisplay(t,e){let s=this.getCellElement(t,e),i=s.querySelector(".cell-input"),l=this.board.getValue(t,e),o=this.board.initialBoard[t][e]!==0;i.value=l?String(l):"",i.readOnly=o&&l!==0,s.classList.remove("initial","solved","has-value","conflict","nocands"),o&&s.classList.add("initial"),l!==0&&s.classList.add("solved","has-value"),this.renderCandidatesForCell(t,e)}updateBoardDisplay(){for(let t=0;t<9;t++)for(let e=0;e<9;e++)this.updateCellDisplay(t,e)}updateCandidates(){this.board.updateCandidates&&this.board.updateCandidates(),this.extensions.getActiveExtensions&&this.extensions.getActiveExtensions().length>0&&this.extensions.updateCandidatesWithExtensions&&this.extensions.updateCandidatesWithExtensions(),this.renderAllCandidates(),this.checkConflicts()}renderAllCandidates(){for(let t=0;t<9;t++)for(let e=0;e<9;e++)this.renderCandidatesForCell(t,e)}renderCandidatesForCell(t,e){let i=this.getCellElement(t,e).querySelector(".candidates"),l=this.board.getValue(t,e),o=i.children;if(l!==0){for(let a=0;a<9;a++)o[a].textContent="";return}let n=this.board.getCandidates(t,e);for(let a=1;a<=9;a++){let d=a-1;o[d].textContent=n.includes(a)?String(a):""}}clearBoard(){this.board=new this.board.constructor,this.tactics=new this.tactics.constructor(this.board),this.extensions=new this.extensions.constructor(this.board),this.tactics.setExtensions(this.extensions),this.solvingHistory=[],this.currentStep=0,this.lastConflictKeys.clear(),this.lastNoCandKeys.clear(),this.updateBoardDisplay(),this.clearHighlights(),this.logMessage("Board cleared","info")}async loadExamplePuzzle(){try{let t=await fetch("examp.e.json");if(t&&t.ok){let e=await t.json();this.board.loadPuzzle(e),this.updateBoardDisplay(),this.updateCandidates(),this.logMessage("Example puzzle loaded from examp.e.json","success");return}}catch{}try{let t=this.getExamplePuzzle();if(t){this.board.loadPuzzle(t),this.updateBoardDisplay(),this.updateCandidates(),this.logMessage("Example puzzle loaded","success");return}}catch{this.logMessage("Failed to load example puzzle","error");return}this.logMessage("No example puzzle available","warning")}getExamplePuzzle(){return[[5,3,0,0,7,0,0,0,0],[6,0,0,1,9,5,0,0,0],[0,9,8,0,0,0,0,6,0],[8,0,0,0,6,0,0,0,3],[4,0,0,8,0,3,0,0,1],[7,0,0,0,2,0,0,0,6],[0,6,0,0,0,0,2,8,0],[0,0,0,4,1,9,0,0,5],[0,0,0,0,8,0,0,7,9]]}validateBoard(){this.board.isBoardValid()?this.board.isComplete()?this.logMessage("Puzzle is complete and valid!","success"):this.logMessage("Puzzle is valid but incomplete","warning"):this.logMessage("Puzzle has errors","error")}executeStep(){var t;let e=((t=this.tacticSelect)===null||t===void 0?void 0:t.value)||"",s=this.tactics.executeTactic(e);s&&s.found?(this.solvingHistory.push({tactic:e,result:s,timestamp:new Date}),this.updateBoardDisplay(),this.board.updateCandidates&&this.board.updateCandidates(),this.extensions.getActiveExtensions&&this.extensions.getActiveExtensions().length>0&&this.extensions.updateCandidatesWithExtensions&&this.extensions.updateCandidatesWithExtensions(),s.changes&&this.applyCandidateEliminations(s.changes),this.renderAllCandidates(),this.checkConflicts(),this.logMessage(s.message,"success"),s.changes&&this.highlightChanges(s.changes),this.board.isComplete&&this.board.isComplete()&&(this.logMessage("Puzzle solved!","success"),this.stopAutoSolve())):this.logMessage(s?s.message:"Tactic returned no result","warning")}applyCandidateEliminations(t){let e=!1,s=i=>Array.isArray(i)?i:i!=null?[i]:[];return t.forEach(i=>{let{row:l,col:o}=i,n=new Set([...s(i.removed),...s(i.value),...s(i.values)].filter(a=>typeof a=="number"));n.size!==0&&this.board.getValue(l,o)===0&&n.forEach(a=>{this.board.banCandidate(l,o,a),e=!0})}),e&&(this.extensions.getActiveExtensions&&this.extensions.getActiveExtensions().length>0&&this.extensions.updateCandidatesWithExtensions&&this.extensions.updateCandidatesWithExtensions(),this.renderAllCandidates()),e}highlightChanges(t){this.clearHighlights(),t.forEach(e=>{let s=this.getCellElement(e.row,e.col);s.classList.add("highlighted"),setTimeout(()=>s.classList.remove("highlighted"),2e3)})}toggleAutoSolve(){this.autoSolving?this.stopAutoSolve():this.startAutoSolve()}startAutoSolve(){this.autoSolving=!0;let t=document.getElementById("autoSolveBtn");t&&(t.textContent="Stop Auto Solve",t.classList.remove("btn-success"),t.classList.add("btn-warning")),this.autoSolveInterval=setInterval(()=>{this.runAutoStep()},600)}runAutoStep(){for(let t of this.autoTacticOrder){let e=JSON.stringify(this.board.board),s=this.tactics.executeTactic(t);if(!s||!s.found)continue;let i=JSON.stringify(this.board.board),l=e!==i;l&&this.updateCandidates();let o=!1;if(s.changes&&(o=this.applyCandidateEliminations(s.changes)),!(!l&&!o))return this.solvingHistory.push({tactic:t,result:s,timestamp:new Date}),this.updateBoardDisplay(),this.renderAllCandidates(),this.checkConflicts(),this.logMessage(s.message,"success"),s.changes&&this.highlightChanges(s.changes),this.board.isComplete&&this.board.isComplete()&&(this.logMessage("Puzzle solved!","success"),this.stopAutoSolve()),!0}return this.logMessage("No tactic made progress. Auto-solve paused.","warning"),this.stopAutoSolve(),!1}stopAutoSolve(){this.autoSolving=!1;let t=document.getElementById("autoSolveBtn");t&&(t.textContent="Auto Solve",t.classList.remove("btn-warning"),t.classList.add("btn-success")),this.autoSolveInterval&&(clearInterval(this.autoSolveInterval),this.autoSolveInterval=null)}resetBoard(){this.board.reset&&this.board.reset(),this.solvingHistory=[],this.currentStep=0,this.lastConflictKeys.clear(),this.lastNoCandKeys.clear(),this.updateBoardDisplay(),this.updateCandidates(),this.clearHighlights(),this.logMessage("Board reset to initial state","info")}updateTacticDescription(){var t;let e=((t=this.tacticSelect)===null||t===void 0?void 0:t.value)||"",s=this.tactics.getTacticDescription(e);this.tacticDescription&&(this.tacticDescription.innerHTML=`
            <h4>${s.name}</h4>
            <p><strong>Difficulty:</strong> ${s.difficulty}</p>
            <p>${s.description}</p>
            <p><strong>How it works:</strong> ${s.explanation}</p>
        `)}addThermoSudoku(){let t=this.extensions.getExampleThermoPaths(),e=this.extensions.addThermoSudoku(t);e.success&&(this.updateCandidates(),this.updateExtensionInfo(),this.logMessage(e.message,"success"))}addKnightsMove(){let t=this.extensions.addKnightsMove();t.success&&(this.updateCandidates(),this.updateExtensionInfo(),this.logMessage(t.message,"success"))}addKingsMove(){let t=this.extensions.addKingsMove();t.success&&(this.updateCandidates(),this.updateExtensionInfo(),this.logMessage(t.message,"success"))}addBoxSumNeighbor(){let t=this.extensions.addBoxSumNeighbor();t.success&&(this.updateCandidates(),this.updateExtensionInfo(),this.logMessage(t.message,"success"))}clearExtensions(){let t=this.extensions.clearExtensions();t.success&&(this.updateCandidates(),this.updateExtensionInfo(),this.logMessage(t.message,"success"))}updateExtensionInfo(){let t=this.extensions.getActiveExtensions?this.extensions.getActiveExtensions():[];if(!this.extensionInfo)return;if(t.length===0){this.extensionInfo.innerHTML="<p>No extensions active. Add custom rules to enhance the puzzle.</p>";return}let e="<h4>Active Extensions:</h4><ul>";t.forEach(s=>{let i=this.extensions.getExtensionDescription(s),l=this.extensions.getConstraintCount(s);e+=`<li><strong>${i.name}</strong> (${i.difficulty})<br><small>${i.description}</small><br><small>Constraints: ${l}</small></li>`}),e+="</ul>",this.extensionInfo.innerHTML=e}checkConflicts(){let t=new Set,e=new Set,s=new Set;for(let n=0;n<9;n++){let a=new Map;for(let d=0;d<9;d++){let h=this.board.getValue(n,d);if(h===0)continue;let r=a.get(h)||[];r.push([n,d]),a.set(h,r)}for(let[,d]of a)d.length>1&&d.forEach(([h,r])=>t.add(`${h},${r}`))}for(let n=0;n<9;n++){let a=new Map;for(let d=0;d<9;d++){let h=this.board.getValue(d,n);if(h===0)continue;let r=a.get(h)||[];r.push([d,n]),a.set(h,r)}for(let[,d]of a)d.length>1&&d.forEach(([h,r])=>t.add(`${h},${r}`))}for(let n=0;n<3;n++)for(let a=0;a<3;a++){let d=new Map;for(let h=n*3;h<n*3+3;h++)for(let r=a*3;r<a*3+3;r++){let p=this.board.getValue(h,r);if(p===0)continue;let f=d.get(p)||[];f.push([h,r]),d.set(p,f)}for(let[,h]of d)h.length>1&&h.forEach(([r,p])=>t.add(`${r},${p}`))}for(let n=0;n<9;n++)for(let a=0;a<9;a++)this.board.getValue(n,a)===0&&this.board.candidates[n][a].size===0&&e.add(`${n},${a}`);for(let n=0;n<9;n++)for(let a=1;a<=9;a++){if(this.board.getRow(n).includes(a))continue;let h=[];for(let r=0;r<9;r++)this.board.getValue(n,r)===0&&this.board.candidates[n][r].has(a)&&h.push([n,r]);if(h.length===0)for(let r=0;r<9;r++)this.board.getValue(n,r)===0&&s.add(`${n},${r}`)}for(let n=0;n<9;n++)for(let a=1;a<=9;a++){let d=!1;for(let r=0;r<9;r++)if(this.board.getValue(r,n)===a){d=!0;break}if(d)continue;let h=[];for(let r=0;r<9;r++)this.board.getValue(r,n)===0&&this.board.candidates[r][n].has(a)&&h.push([r,n]);if(h.length===0)for(let r=0;r<9;r++)this.board.getValue(r,n)===0&&s.add(`${r},${n}`)}for(let n=0;n<3;n++)for(let a=0;a<3;a++)for(let d=1;d<=9;d++){let h=!1,r=[];for(let f=n*3;f<n*3+3;f++)for(let u=a*3;u<a*3+3;u++){let y=this.board.getValue(f,u);y===d&&(h=!0),y===0&&r.push([f,u])}if(h)continue;let p=!1;for(let[f,u]of r)if(this.board.candidates[f][u].has(d)){p=!0;break}if(!p&&r.length>0)for(let[f,u]of r)s.add(`${f},${u}`)}this.cells.forEach(n=>n.classList.remove("conflict","nocands","unit-issue")),t.forEach(n=>{let[a,d]=n.split(",").map(Number);this.getCellElement(a,d).classList.add("conflict")}),e.forEach(n=>{let[a,d]=n.split(",").map(Number);this.getCellElement(a,d).classList.add("nocands")}),s.forEach(n=>{let[a,d]=n.split(",").map(Number);this.getCellElement(a,d).classList.add("unit-issue")});let i=!this.setsEqual(t,this.lastConflictKeys),l=!this.setsEqual(e,this.lastNoCandKeys),o=!this.setsEqual(s,this.lastUnitIssueKeys||new Set);(i||l||o)&&(t.size>0&&this.logMessage(`Conflicts detected in ${t.size} cell(s)`,"error"),e.size>0&&this.logMessage(`No-candidate issue in ${e.size} cell(s)`,"warning"),s.size>0&&this.logMessage("Unit impossibility detected (a digit has no place)","warning"),t.size===0&&e.size===0&&s.size===0&&this.logMessage("No conflicts detected","success")),this.lastConflictKeys=t,this.lastNoCandKeys=e,this.lastUnitIssueKeys=s}setsEqual(t,e){if(t.size!==e.size)return!1;for(let s of t)if(!e.has(s))return!1;return!0}logMessage(t,e="info"){let s=new Date().toLocaleTimeString();if(!this.solvingLog)return;let i=document.createElement("div");i.className=`log-entry ${e}`,i.innerHTML=`<strong>[${s}]</strong> ${t}`,this.solvingLog.appendChild(i),this.solvingLog.scrollTop=this.solvingLog.scrollHeight;let l=this.solvingLog.querySelectorAll(".log-entry");l.length>50&&l[0].remove()}getBoardState(){return{board:this.board.board,initialBoard:this.board.initialBoard,extensions:this.extensions.exportState(),solvingHistory:this.solvingHistory}}loadBoardState(t){t.board&&this.board.loadPuzzle(t.board),t.extensions&&this.extensions.importState(t.extensions),t.solvingHistory&&(this.solvingHistory=t.solvingHistory),this.updateBoardDisplay(),this.updateCandidates(),this.updateExtensionInfo()}loadFromCodeInput(){let t=document.getElementById("codeInput"),e=(t?.value||"").trim();try{this.board.loadFromCode(e),this.updateBoardDisplay(),this.updateCandidates(),this.clearHighlights(),this.solvingHistory=[],this.logMessage("Loaded puzzle from 81-digit code","success")}catch(s){this.logMessage(s.message||"Invalid code","error")}}},L=I;var g=globalThis;g.SudokuBoard=E;g.SudokuTactics=w;g.SudokuExtensions=z;g.tacticClasses=S;g.SudokuApp=L;document.addEventListener("DOMContentLoaded",()=>{try{g.sudokuApp=new g.SudokuApp}catch(c){console.warn("entry.ts: failed to auto-instantiate SudokuApp",c)}});})();
